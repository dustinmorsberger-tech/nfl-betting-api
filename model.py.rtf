{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import requests\
import pandas as pd\
\
def implied_prob(odds):\
    if odds < 0:\
        return -odds / (-odds + 100)\
    else:\
        return 100 / (odds + 100)\
\
def expected_value(prob, odds):\
    dec_odds = (100 + odds) / 100 if odds > 0 else 100 / abs(odds)\
    return (prob * (dec_odds - 1)) - (1 - prob)\
\
def estimate_true_prob_spread():\
    return 0.57  # Placeholder\
\
def estimate_td_prob(player_name):\
    name = player_name.lower()\
    if "mccaffrey" in name:\
        return 0.65\
    elif "hill" in name:\
        return 0.6\
    elif "kelce" in name:\
        return 0.58\
    else:\
        return 0.3\
\
def generate_all_picks(api_key):\
    url = "https://api.the-odds-api.com/v4/sports/americanfootball_nfl/odds"\
    params = \{\
        "regions": "us",\
        "markets": "spreads,totals,player_touchdown_anytime",\
        "oddsFormat": "american",\
        "apiKey": api_key\
    \}\
    resp = requests.get(url, params=params)\
    resp.raise_for_status()\
    data = resp.json()\
\
    BOOKS = ["fanduel", "draftkings", "caesars"]\
    spread_bets, total_bets, td_bets = [], [], []\
\
    for game in data:\
        matchup = f"\{game['home_team']\} vs \{game['away_team']\}"\
        for book in game['bookmakers']:\
            if book['key'] not in BOOKS:\
                continue\
            for m in book['markets']:\
                if m['key'] == "spreads":\
                    for o in m['outcomes']:\
                        prob, imp = estimate_true_prob_spread(), implied_prob(o['price'])\
                        ev = expected_value(prob, o['price'])\
                        spread_bets.append(\{\
                            "matchup": matchup,\
                            "book": book['key'],\
                            "team": o['name'],\
                            "line": o['point'],\
                            "odds": o['price'],\
                            "your_prob": round(prob, 2),\
                            "book_prob": round(imp, 2),\
                            "EV": round(ev * 100, 2)\
                        \})\
\
                elif m['key'] == "totals":\
                    for o in m['outcomes']:\
                        prob, imp = 0.54, implied_prob(o['price'])\
                        ev = expected_value(prob, o['price'])\
                        total_bets.append(\{\
                            "matchup": matchup,\
                            "book": book['key'],\
                            "bet": o['name'],\
                            "total": o['point'],\
                            "odds": o['price'],\
                            "your_prob": round(prob, 2),\
                            "book_prob": round(imp, 2),\
                            "EV": round(ev * 100, 2)\
                        \})\
\
                elif m['key'] == "player_touchdown_anytime":\
                    for o in m['outcomes']:\
                        prob = estimate_td_prob(o['name'])\
                        imp = implied_prob(o['price'])\
                        ev = expected_value(prob, o['price'])\
                        td_bets.append(\{\
                            "matchup": matchup,\
                            "book": book['key'],\
                            "player": o['name'],\
                            "odds": o['price'],\
                            "your_prob": round(prob, 2),\
                            "book_prob": round(imp, 2),\
                            "EV": round(ev * 100, 2)\
                        \})\
\
    return \{\
        "spreads": sorted(spread_bets, key=lambda x: x["EV"], reverse=True)[:5],\
        "totals": sorted(total_bets, key=lambda x: x["EV"], reverse=True)[:5],\
        "td_props": sorted(td_bets, key=lambda x: x["EV"], reverse=True)[:5]\
    \}\
}